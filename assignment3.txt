Q1. What is the purpose of Python's OOP?

In Python, object-oriented Programming (OOPs) is a programming paradigm that uses objects and classes in programming. 
It aims to implement real-world entities like inheritance, polymorphisms, encapsulation, etc. in the programming

Q2. Where does an inheritance search look for an attribute?

An inheritance search looks for an attribute first in the instance object, then in the class the instance was created from,
then in all higher superclasses, progressing from left to right (by default)

Q3. How do you distinguish between a class object and an instance object?

Class variables are shared across all objects while instance variables are for data unique to each instance

Q4. What makes the first argument in a class’s method function special?

The self parameter is a reference to the current instance of the class, 
and is used to access variables that belongs to the class.

Q5. What is the purpose of the init method?

init is short for initialization. It is a constructor which gets called when you make an instance of the class and it is not necessary. 
But usually it our practice to write init method for setting default state of the object.

Q6. What is the process for creating a class instance?

To create instances of a class, you call the class using class name and pass in whatever arguments its __init__ method accepts.

Q7. What is the process for creating a class?

To create a class, use the keyword class

Q8. How would you define the superclasses of a class?

The class from which a class inherits is called the parent or superclass.
A class which inherits from a superclass is called a subclass, also called heir class or child class.
Superclasses are sometimes called ancestors as well.

Q9. What is the relationship between classes and modules?

Modules are collections of methods and constants. They cannot generate instances. 
Classes may generate instances (objects), and have per-instance state (instance variables).

Q10. How do you make instances and classes?

To create instances of a class, you call the class using class name and pass in whatever arguments its __init__ method accepts.

Q11. Where and how should be class attributes created?

A class attribute is shared by all instances of the class. To define a class attribute, 
you place it outside of the __init__() method.

Q12. Where and how are instance attributes created?

Instance attributes are defined in the constructor. 
Defined directly inside a class. Defined inside a constructor using the self parameter.

Q13. What does the term "self" in a Python class mean?

The self parameter is a reference to the current instance of the class, 
and is used to access variables that belongs to the class.

Q14. How does a Python class handle operator overloading?

Operator Overloading means giving extended meaning beyond their predefined operational meaning.
Such as, we use the "+" operator for adding two integers as well as joining two strings or merging two lists.

Q15. When do you consider allowing operator overloading of your classes?

Q16. What is the most popular form of operator overloading?

A very popular and convenient example is the Addition (+) operator. 
the '+' operator operates on two numbers and the same operator operates on two strings. 

Q17. What are the two most important concepts to grasp in order to comprehend Python OOP code?

inheritance and polymorphism. 
Both inheritance and polymorphism are key ingredients for designing robust, flexible, and easy-to-maintain software. 

Q18. Describe three applications for exception processing.

Q19. What happens if you don't do something extra to treat an exception?

When an exception occurred, if you don't handle it,
the program terminates abruptly and the code past the line that caused the exception will not get executed.

Q20. What are your options for recovering from an exception in your script?

What are your options for recovering from an exception in your script in Python?
We can provide a  except clause, which handles any exception. After the except clause, 
we can include an else-clause,
The code in the else-block executes if the code in the try: block does not raise an exception.

Q21. Describe two methods for triggering exceptions in your script.

Try – This method catches the exceptions raised by the program.
Raise – Triggers an exception manually using custom exceptions.

Q22. Identify two methods for specifying actions to be executed at termination time, regardless of whether or not an exception exists.

Finally block always executes irrespective of an exception being thrown or not. 
The final keyword allows you to create a block of code that follows a try-catch block.

Q23. What is the purpose of the try statement?

The try statement allows you to define a block of code to be tested for errors while it is being executed. 

Q24. What are the two most popular try statement variations?

the two most popular try statement variations are
Try/Except/Else
Try/Except/Finally

Q25. What is the purpose of the raise statement?

Python raise Keyword is used to raise exceptions or errors. 
The raise keyword raises an error and stops the control flow of the program.

Ex:
a = 5
  
if a % 2 != 0:
    raise Exception("The number shouldn't be an odd integer")

Q26. What does the assert statement do, and what other statement is it like?

The assert keyword is used when debugging code.

The assert keyword lets you test if a condition in your code returns True, if not, the program will raise an AssertionError.

Q27. What is the purpose of the with/as argument, and what other statement is it like?

In Python, with statement is used in exception handling to make the code cleaner and much more readable.

 without using with statement
file = open('file_path', 'w')
file.write('hello world !')
file.close()
=====
  using with statement
with open('file_path', 'w') as file:
    file.write('hello world !')

Q28. What are *args, **kwargs?

*args passes variable number of non-keyworded arguments and on which operation of the tuple can be performed. 
**kwargs passes variable number of keyword arguments dictionary to function on which operation of a dictionary can be performed.

Q29. How can I pass optional or keyword parameters from one function to another?

An argument in Python that has a default value is called an optional argument.
A default value for an argument can be specified using the assignment operator.

def function(a, b=999):
   return a+b
print(function(2, 3))
# In the function 1 is represented as 'a' in the function and
#The function uses the default value of b
print(function(1))

Q30. What are Lambda Functions?

A lambda function is an anonymous function (i.e., defined without a name) that can take any number of arguments but,
unlike normal functions, evaluates and returns only one expression.

Q31. Explain Inheritance in Python with an example?

Inheritance allows us to define a class that inherits all the methods and properties from another class.

Parent class is the class being inherited from, also called base class.

Child class is the class that inherits from another class, also called derived class.

class Person:
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname

  def printname(self):
    print(self.firstname, self.lastname)
class Student(Person):
  pass
x = Student("Mike", "Olsen")
x.printname()

Q32. Suppose class C inherits from classes A and B as class C(A,B).Classes A and B both have their own versions of method func(). If we call func() from an object of class C, which version gets invoked?

Q33. Which methods/functions do we use to determine the type of instance and inheritance?

Python has two built-in functions that work with inheritance:

Use isinstance() to check an instance's type: isinstance(obj, int) will be True only if obj.__class__ is int or some class derived from int .
Use issubclass() to check class inheritance: issubclass(bool, int) is True since bool is a subclass of int .

Q34.Explain the use of the 'nonlocal' keyword in Python.

The nonlocal keyword is used to work with variables inside nested functions, 
where the variable should not belong to the inner function.

Q35. What is the global keyword?

The global keyword is used to create global variables from a no-global scope, e.g. inside a function.